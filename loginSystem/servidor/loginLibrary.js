/*
*José Francisco Zerón Cabrera
*154678
*
*Library used for creating automatically sql tables in order to manage user rols and permissions
*for each type of action (REST operations) 
*
*/

//Module that deals with the permissions to access to the filesystem
var fs = require('fs');
//Modlue to connect with postgresql
const {Client,Pool} = require('pg');
//Moudle to connect with Redis
var redis = require('Redis');
//Module to make promises easier
var bluebird = require('bluebird');
//Make easier promises of Redis especifically
bluebird.promisifyAll(redis.RedisClient.prototype);
bluebird.promisifyAll(redis.Multi.prototype);
//Module to generate Unique Universal Identifiers
const uuidv1 = require('uuid/v1');

//GLOBAL VARIABLES FOR SQL SERVER
var ipSQLServer = '192.168.0.30';
var portNumberSQLServer = 5432;
var databaseSQLServer = 'postgres';
var userSQLServer = 'postgres';
var pswdSQLServer = 'postgres';

//GLOBAL VARIABLES FOR REDIS SERVER
var ipRedisServer = '192.168.0.40';
var portNumberRedisServer = 6379;
//SESSION ID That if null means that there is NO Session in this device
var sessionId;


exports.createDatabaseFile = function()
{

	sqlData = 'drop table PERMISSION;\n'+
			  'drop table USERS;\n'+
			  'drop table ROL;\n'+
			  'create table ROL( rolId SERIAL PRIMARY KEY, name varchar(50) );\n' +
			  'create table USERS( userId SERIAL PRIMARY KEY, ' +
			  'password varchar(20),\n'+
			  'username varchar(20),\n'+
			  'rolId INTEGER REFERENCES ROL(rolId) );\n'+
			  'create table PERMISSION( id SERIAL, pStr varchar(1000),'+
			  'type varchar(20), rolId INTEGER REFERENCES ROL(rolId),'+
			  'PRIMARY KEY (id,rolId)  );\n';

	//TEST DATA
	sqlData = sqlData + "INSERT INTO ROL (rolId, name) VALUES (DEFAULT,'Admin');\n"+
						"INSERT INTO USERS (userId,password,username,rolId) VALUES (DEFAULT,'root','root',1);\n"+
						"INSERT INTO USERS (userId,password,username,rolId) VALUES (DEFAULT,'paco','pass',1);";		  

	//Create a file with the content, and if already exists it overwrites it
	fs.writeFileSync('database.sql', sqlData);

}//End function createDatabaseFile
//---------------------------------
/*
*Connect to Postgres DB according to global variables and execute the file
*previously generated by function createDatabaseFile()
*/
exports.uploadDatabaseFile = function()
{
	//Convertir .sql a cadena
	var sqlFile = fs.readFileSync('database.sql').toString();
	
	//Generate client for connection
	const pg = generateClientDBUsrPer();

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('Connected to execute .sql File!!');

			//Ejecutar archivo .sql como query
			client.query(sqlFile, function(err,result){
				//done();
				if(err)
				{
					console.log("error", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('Datos guardados!');	

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End function uploadDatabaseFile
//---------------------------------
/*
*Function that given a name for the rol generates a Rol in the ROL table.
*
*/
exports.insertRol = function(name)
{
	const pg = generateClientDBUsrPer();

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('Connected to insert a new ROL');

			//Ejecutar archivo .sql como query
			client.query("INSERT INTO ROL (rolId, name) VALUES (DEFAULT,'"+name+"');", function(err,result){
				if(err)
				{
					console.log("Error inserting new Rol", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('Nuevo Rol creado!');
				console.log(result);	

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End function insertRol
//---------------------------------
/*
*
*Function that generates a new User in table USER given an id, password and a existing rolID
*/
exports.insertUser = function(userName,pass,rolid)
{
	const pg = generateClientDBUsrPer();

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('Connected to insert a new USER');

			//Ejecutar archivo .sql como query
			client.query("INSERT INTO USERS (userId,password,username,rolId) VALUES (DEFAULT,'"+pass+"','"+userName+"',"+rolid+") RETURNING userId;", function(err,result){
				if(err)
				{
					console.log("Error inserting new User", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('New user succesfully created!');
				console.log(result.rows[0].userid);
				
				return result.rows[0].userid;	

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				//process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End function insertRol
//---------------------------------
/*
*Set the values (ip and port number) where the server with the databse that contains
*the tables (ROL,USER,PERMISSION) responds to queries
*/
exports.setDataDBUsersAndPermissions = function(ip,socket,database,user,pass)
{
	ipSQLServer = ip;
	portNumberSQLServer = socket;
	databaseSQLServer = database;
	userSQLServer = user;
	pswdSQLServer = pass;

}//End setDataDBUsersAndPermissions function
//--------------------------------
/*
*Function that generates a new client given the actual values for connection to DB
*that stores tables USERS, PERMISSION and ROL
*/
function generateClientDBUsrPer()
{
	return new Client({
		user : userSQLServer,
		host : ipSQLServer,
		database : databaseSQLServer,
		password: pswdSQLServer,
		port : portNumberSQLServer,
	});
}
//--------------------------------
/*
*Funcion que dado el id del usuario se verifique si tiene los permisos para hacer una accion
*P/E: userId = 1, permisson = 'user/login', type='get'
*/
function verifyPermission(uid, permisson, type)
{

}//End funcion verifyPermission
//------------------------------
/*
*Funcion que inicie una session con base de datos que administra sesiones
*Regesa: La sessionkey que se genera automaticamente
*/
function intializeSession(uid)
{

}//End function initializeSession
//-----------------------------
/*
*Verifies if a session and userId pair exists in the table.
*Returns: If a session with that key and uid was found or not in the table
*/
function verifySession(uid, sessionKey)
{

}//End verifySession function
//-----------------------------
/*
*End a session, if found, in the table with session and userId paris.
*Returns: Sucess or failure(if not found) the session that we wanted to end
*/
function endSession(uid, sessionKey)
{

}//End endSession function
//-----------------------------
/*
*Set the values (ip and port number) where the server with the Redis DB
*that handles the pairs of UserId,SessionNumber.
*/
exports.setDataSessionsDB = function(ip, port)
{
	ipRedisServer = ip;
	portNumberRedisServer = port;

}//End setDataSessioSnDB function
//-----------------------------
/*
*Insert a UID in table with the key generated using a uuid
IMPLMENTAT EN ESTA FUNCION PROMISE!!
*
*/
exports.createSession = function(uid)
{
	return new Promise(function (resolve, reject)
	{
		//Initialize redis client
		var client = redis.createClient(portNumberRedisServer, 	ipRedisServer);

		//Probe connection
		client.on('connect', function() {
			console.log('Redis client connnected succesfully to create a new session!');
		} );

		//Print errors if any
		client.on('error', function(err) {
			console.log("ERROR AT: "+err);
		});//Fin funcion

		//Create session key with unique universal identifier
		var key =  uuidv1();
		var seconds = 60;
		//Set session that expires after determined number of seconds
		client.setex(key,seconds,uid, function(err,result)
		{
			console.log("Result inserting new session:"+result);

			//Return unique universal identifier as resolve of the promise of createSession function
			resolve(key);

		});//end setex


	});//End promise

	

}//End createSessio  function
//-----------------------------
/*
*Look for existing uid given it is key.
*@Return {PROMISE Object} TRUE if found active Session and FALSE otherwise.
*/
exports.findSession = function(key)
{
	//Initialize redis client
	var client = redis.createClient(portNumberRedisServer, 	ipRedisServer);
	var found = false;

	//Probe connection
	client.on('connect', function() {
		console.log('Redis client connnected succesfully!');
	} );

	//Print errors if any
	client.on('error', function(err) {
		console.log("ERROR AT: "+err);
	});//Fin funcion

	client.getAsync(key).then(function(result){

		console.log('RESULT: ' + result);

		//Verify if exists an active session
		if(result != null)
		{
			//An active session has been found
			found = true;
		}//Finf if 2	

		console.log('Is there an active session? : ' + found);

		return Promise.all([found]);

	});//Fin getAsync provided by promisify bluebird

}//End createSessio function
//-----------------------------
/*
*Based in the return value of findSession perform a function when
*returns true and other when returning false
*
*@Return {PROMISE Object} TRUE if found active Session and FALSE otherwise.
*/
exports.handlerSession  = function(key,res,activeSessionPage,expiredSessionPage)
{
	//Initialize redis client
	var client = redis.createClient(portNumberRedisServer, 	ipRedisServer);
	var found = false;

	//Probe connection
	client.on('connect', function() {
		console.log('Redis client connnected succesfully!');
	} );

	//Print errors if any
	client.on('error', function(err) {
		console.log("ERROR AT: "+err);
	});//Fin funcion

	client.getAsync(key).then(function(result){

		console.log('RESULT: ' + result);

		//Verify if exists an active session
		if(result != null)
		{
			//An active session has been found
			found = true;
		}//Finf if 2	

		console.log('Is there an active session? : ' + found);

		Promise.all([found]).then(function(values){

			var isActive = values[0];
			console.log('SessionActive?->'+isActive)
			if(isActive)
			{
				res.redirect( activeSessionPage);
			}//End if
			else
			{
				res.redirect( expiredSessionPage);
			}//End else	

		});//Fin promise all


	});//Fin getAsync provided by promisify bluebird

}//End handler session function
//-----------------------------
/*
*Look for exisiting user in database of user
*/
exports.findUser = function(uname,password)
{
	const pg = generateClientDBUsrPer();
	var uid = -1;

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('connected!!');

			//Ejecutar archivo .sql como query
			client.query("SELECT userID FROM users WHERE username LIKE '"+uname+"' AND password LIKE '"+password+"';", function(err,result){
				//done();
				if(err)
				{
					console.log("Error al buscar usuario: ", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('Result query:');
				//console.log(result);

				//Found a match
				if(result.rowCount > 0)
				{
					uid = result.rows[0].userid;
					console.log('User found with id:');
					console.log(uid);

				}//Fin if	

				return Promise.all([uid]);;


				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End findUser function
//-----------------------------
//Session example:
//https://www.codementor.io/mayowa.a/how-to-build-a-simple-session-based-authentication-system-with-nodejs-from-scratch-6vn67mcy3

//Hash passwords with bcrypt:
//https://medium.com/@mridu.sh92/a-quick-guide-for-authentication-using-bcrypt-on-express-nodejs-1d8791bb418f
//https://www.npmjs.com/package/bcrypt-nodejs

//Process to register a session as the first Time and create a session returning the id that identifies this session:
/*
*
*First login that if valid credentials it also creates a session and reutrns 
*the key of that session as result.
*
*@param {string} username
*@param {string} pass
*@param {int} rolid
*@return {Promise that resolves/returns the session id that is an universal unique identifier} new Promise
*/
exports.doLogin = function(userName,pass,rolid)
{
	const pg = generateClientDBUsrPer();

	return new Promise(
		function (resolve,reject) 
		{

			pg.connect(async function(err,client){
				if(err)
				{
					console.log(err);
				}//Fin if
				else
				{
					console.log('Connected to insert a new USER');

					//Ejecutar archivo .sql como query
					client.query("INSERT INTO USERS (userId,password,username,rolId) VALUES (DEFAULT,'"+pass+"','"+userName+"',"+rolid+") RETURNING userId;", 
						//This funvtion must be async because there is an await inside it!!
						async function(err,result){
							if(err)
							{
								console.log("Error inserting new User", err);
								//Kill the server
								process.exit(1);

							}//FIn if

							console.log('New user succesfully created with id: ');
							var userid = result.rows[0].userid;
							console.log(userid);

							try
							{
								//OBTENER ESTE VALOR COMO VALOR REGREADO DE PROMISSE
								var sessionIdentifier = await exports.createSession(userid);
								console.log("New Session established between the universal unique identifier: "+sessionIdentifier+" and the id: "+userid);
								//console.log(sessionIdentifier);

								//Return to the client the universal session identifier as resolve of the promise of doLogin function
								resolve(sessionIdentifier);

							}//End try
							catch(errror)
							{
								console.log("Error in promise of createSession:"+errror)
								reject(err);
								//Stop the server
								process.exit(1);


							}//End catch

					});//End client.query	

				}//End else	
			});//End conexion

		});//Fin objeto Promise

}//End function do login

/*exports.doLogin = function(userName,pass,rolid)
{
	const pg = generateClientDBUsrPer();

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('Connected to insert a new USER');

			//Ejecutar archivo .sql como query
			client.query("INSERT INTO USERS (userId,password,username,rolId) VALUES (DEFAULT,'"+pass+"','"+userName+"',"+rolid+") RETURNING userId;", function(err,result){
				if(err)
				{
					console.log("Error inserting new User", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('New user succesfully created with id: ');
				var userid = result.rows[0].userid;
				console.log(userid);

				var sessionIdentifier = exports.createSession(userid);

				console.log("New Session established between the universal unique identifier: "+sessionIdentifier+"an the id: "+userid);
				//console.log(sessionIdentifier);

				//Return to the client the universal session identifier
				return sessionIdentifier;

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);	

			});//End client.query	

		}//End else	
	});//End conexion

	return new Promise(
		function (resolve,reject) 
		{
			

		});//Fin objeto Promise

}//End function do login*/
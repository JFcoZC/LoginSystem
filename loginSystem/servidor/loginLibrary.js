/*
*José Francisco Zerón Cabrera
*154678
*
*Library used for creating automatically sql tables in order to manage user rols and permissions
*for each type of action (REST operations) 
*
*/

//Module that deals with the permissions to access to the filesystem
var fs = require('fs');
//Modlue to connect with postgresql
const {Client,Pool} = require('pg');
//Moudle to connect with Redis
var redis = require('Redis');
//Module to generate Unique Universal Identifiers
const uuidv1 = require('uuid/v1');

//GLOBAL VARIABLES FOR SQL SERVER
var ipSQLServer = '192.168.0.30';
var portNumberSQLServer = 5432;
var databaseSQLServer = 'postgres';
var userSQLServer = 'postgres';
var pswdSQLServer = 'postgres';

//GLOBAL VARIABLES FOR REDIS SERVER
var ipRedisServer = '192.168.0.40';
var portNumberRedisServer = 6379;
//SESSION ID That if null means that there is NO Session in this device
var sessionId;


exports.createDatabaseFile = function()
{

	sqlData = 'drop table PERMISSION;\n'+
			  'drop table USERS;\n'+
			  'drop table ROL;\n'+
			  'create table ROL( rolId SERIAL PRIMARY KEY);\n' +
			  'create table USERS( userId SERIAL PRIMARY KEY, ' +
			  'password varchar(20),\n'+
			  'rolId INTEGER REFERENCES ROL(rolId) );\n'+
			  'create table PERMISSION( id SERIAL, pStr varchar(1000),'+
			  'type varchar(20), rolId INTEGER REFERENCES ROL(rolId),'+
			  'PRIMARY KEY (id,rolId)  );\n';

	//Create a file with the content, and if already exists it overwrites it
	fs.writeFileSync('database.sql', sqlData);

}//End function createDatabaseFile
//---------------------------------
/*
*Connect to Postgres DB according to global variables and execute the file
*previously generated by function createDatabaseFile()
*/
exports.uploadDatabaseFile = function()
{
	const pg = new Client({
		user : userSQLServer,
		host : ipSQLServer,
		database : databaseSQLServer,
		password: pswdSQLServer,
		port : portNumberSQLServer,
	})

	//Convertir .sql a cadena
	var sqlFile = fs.readFileSync('database.sql').toString();
	

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('connected!!');

			//Ejecutar archivo .sql como query
			client.query(sqlFile, function(err,result){
				//done();
				if(err)
				{
					console.log("error", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('Datos guardados!');	

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End function uploadDatabaseFile
//---------------------------------
/*
*
*/
exports.insertRol = function()
{
	const pg = new Client({
		user : userSQLServer,
		host : ipSQLServer,
		database : databaseSQLServer,
		password: pswdSQLServer,
		port : portNumberSQLServer,
	})

	pg.connect(function(err,client){
		if(err)
		{
			console.log(err);
		}//Fin if
		else
		{
			console.log('connected!!');

			//Ejecutar archivo .sql como query
			client.query('INSERT INTO ROL (rolId) VALUES (DEFAULT);', function(err,result){
				//done();
				if(err)
				{
					console.log("error al insertar Rol", err);
					//Finalizar con errror
					process.exit(1);

				}//FIn if

				console.log('Nuevo Rol creado!');
				console.log(result);	

				//Finalizar exitosamente la conexion hasta de spues de haber ejecutado .sql
				process.exit(0);

			});//End client.query	

		}//End else	
	});//End conexion

}//End function insertRol
//---------------------------------
/*
*Set the values (ip and port number) where the server with the databse that contains
*the tables (ROL,USER,PERMISSION) responds to queries
*/
exports.setDataDBUsersAndPermissions = function(ip,socket,database,user,pass)
{
	ipSQLServer = ip;
	portNumberSQLServer = socket;
	databaseSQLServer = database;
	userSQLServer = user;
	pswdSQLServer = pass;

}//End setDataDBUsersAndPermissions function
//--------------------------------
/*
*Funcion que dado el id del usuario se verifique si tiene los permisos para hacer una accion
*P/E: userId = 1, permisson = 'user/login', type='get'
*/
function verifyPermission(uid, permisson, type)
{

}//End funcion verifyPermission
//------------------------------
/*
*Funcion que inicie una session con base de datos que administra sesiones
*Regesa: La sessionkey que se genera automaticamente
*/
function intializeSession(uid)
{

}//End function initializeSession
//-----------------------------
/*
*Verifies if a session and userId pair exists in the table.
*Returns: If a session with that key and uid was found or not in the table
*/
function verifySession(uid, sessionKey)
{

}//End verifySession function
//-----------------------------
/*
*End a session, if found, in the table with session and userId paris.
*Returns: Sucess or failure(if not found) the session that we wanted to end
*/
function endSession(uid, sessionKey)
{

}//End endSession function
//-----------------------------
/*
*Set the values (ip and port number) where the server with the Redis DB
*that handles the pairs of UserId,SessionNumber.
*/
exports.setDataSessioSnDB = function(ip, port)
{
	ipRedisServer = ip;
	portNumberRedisServer = port;

}//End setDataSessioSnDB function
//-----------------------------
/*
*Insert a UID in table with the key generated using a uuid
*
*/
exports.createSession = function(uid)
{
	//Initialize redis client
	var client = redis.createClient(portNumberRedisServer, 	ipRedisServer);

	//Probe connection
	client.on('connect', function() {
		console.log('Redis client connnected succesfully!');
	} );

	//Print errors if any
	client.on('error', function(err) {
		console.log("ERROR AT: "+err);
	});//Fin funcion

	//Create session key
	var key =  1;//uuidv1();
	var seconds = 60;
	//Set session that expires after determined number of seconds
	client.setex(key,seconds,uid, function(err,result){
		console.log(result);
	});

}//End createSessio  function
//-----------------------------
/*
*Look for existing uid given it is key
*
*/
exports.findSession = function(key)
{
	//Initialize redis client
	var client = redis.createClient(portNumberRedisServer, 	ipRedisServer);

	//Probe connection
	client.on('connect', function() {
		console.log('Redis client connnected succesfully!');
	} );

	//Print errors if any
	client.on('error', function(err) {
		console.log("ERROR AT: "+err);
	});//Fin funcion

	client.get(key, function(err,result){

		if(err)
		{
			console.log(err);
			throw err;

		}//Fin if	

		console.log('RESULT: ' + result);
	});//Fin get

}//End createSessio  function
//-----------------------------
//Session example:
//https://www.codementor.io/mayowa.a/how-to-build-a-simple-session-based-authentication-system-with-nodejs-from-scratch-6vn67mcy3

//Hash passwords with bcrypt:
//https://medium.com/@mridu.sh92/a-quick-guide-for-authentication-using-bcrypt-on-express-nodejs-1d8791bb418f
//https://www.npmjs.com/package/bcrypt-nodejs

//Proceso para verificar sessiones:
/*1)Verificar que ID de usuario exista en tabla USERS:
*
* 
*
*
*/